/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "engram.dtsi"
#include "taps.dtsi"

#ifndef LAYOUT
	#define LAYOUT 1
#endif

#define QWERTY 0
#define ENGRAM 1
#define ENGRAMMER 2

#define NAV 1
#define NUM 2
#define KP 3

/ {
	combos {
		compatible = "zmk,combos";
		combo_num_l {
			timeout-ms = <50>;
			key-positions = <24 25>;
			bindings = <&mo NUM>;
		};
		combo_num_r {
			timeout-ms = <50>;
			key-positions = <26 27>;
			bindings = <&mo NUM>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <0 8>;
			layers = <0>;
			bindings = <&kp ESC>;
		};
		combo_caps_word {
			timeout-ms = <50>;
			key-positions = <8 16>;
			layers = <0>;
			bindings = <&caps_word>;
		};

		#if LAYOUT == ENGRAM || LAYOUT == ENGRAMMER
		combo_z {
			timeout-ms = <50>;
			key-positions = <7 15>;
			layers = <0>;
			bindings = <&kp Z>;
		};
		combo_q {
			timeout-ms = <50>;
			key-positions = <15 23>;
			layers = <0>;
			bindings = <&kp Q>;
		};
		combo_minus {
			timeout-ms = <25>;
			key-positions = <8 9>;
			layers = <0>;
			bindings = <&kp MINUS>;
		};
		combo_comma {
			timeout-ms = <25>;
			key-positions = <9 10>;
			layers = <0>;
			bindings = <&kp COMMA>;
		};
		combo_sqt {
			timeout-ms = <25>;
			key-positions = <10 11>;
			layers = <0>;
			bindings = <&kp SQT>;
		};
		combo_semi {
			timeout-ms = <25>;
			key-positions = <12 13>;
			layers = <0>;
			bindings = <&kp SEMI>;
		};
		combo_dot {
			timeout-ms = <25>;
			key-positions = <13 14>;
			layers = <0>;
			bindings = <&kp DOT>;
		};
		combo_slash {
			timeout-ms = <25>;
			key-positions = <14 15>;
			layers = <0>;
			bindings = <&kp SLASH>;
		};
		#elif LAYOUT == QWERTY
		#endif
	};
	
	
	keymap {
		compatible = "zmk,keymap";
		
    #if LAYOUT == ENGRAM
		engram_layer {
			label = "Engram";
			bindings = <
			&kp B    	&kp Y    	&kp O     	&kp U     		&kp L      		&kp D    	&kp W   	&kp V
			&hl LCTRL C &hl LALT I 	&hl LGUI E  &hls LSHFT A    &hrs RSHFT H  	&hr RGUI T 	&hr RALT S 	&hr RCTRL N
			&kp G    	&kp X    	&kp J     	&kp K       	&kp R      		&kp M    	&kp F    	&kp P
			&mqt KP TAB &mqt NAV BSPC &mqt NAV SPACE &mqt KP RETURN
			>;
		};
	#elif LAYOUT == ENGRAMMER
		engrammer_layer {
			label = "Engrammer";
			bindings = <
			&kp B    	&kp Y    	&kp O     	&kp U       	&kp L      		&kp D    	&kp W    	&kp V
			&hl LCTRL C &hl LALT I 	&hl LGUI E  &hls LSHFT A    &hrs RSHFT H  	&hr RGUI T 	&hr RALT S 	&hr RCTRL N
			&kp G    	&kp X    	&kp J     	&kp K      		&kp R      		&kp M    	&kp F    	&kp P
			&mqt KP TAB &mqt NAV BSPC &mqt NAV SPACE &mqt KP RETURN
			>;
		};
    #endif

		nav_layer {
			label = "Nav";
			bindings = <
			&kp EXCL   		&kp AT     		&kp LBKT    	&kp RBKT      	&kp  HOME       &kp PG_DN      	&kp PG_UP   	&kp END
			&hl LCTRL LPAR 	&hl LALT RPAR 	&hl LGUI LBRC 	&hls LSHFT RBRC &hrs RSHFT LARW	&hr RGUI DARW 	&hr RALT UARW 	&hr RCTRL RARW
			&kp LT     		&kp SLASH     	&kp EQUAL      	&kp GT          &kp LG(Z)      	&kp LG(X)   	&kp LG(C)  		&kp LG(V)
			&trans          &trans         	&trans      	&trans
			>;
		};
		
    #if LAYOUT == ENGRAM
		num_layer {
			label = "Num";
			bindings = <
			&kp F2      &kp F3      &kp F4       &kp F5    &kp F8    	&kp F9     &kp F10     &kp F11
			&kp PIPE    &kp EQUAL   &kp TILDE    &kp PLUS  &kp CARET    &kp AMPS   &kp PRCNT   &kp STAR
			&kp N1      &kp N2      &kp N3       &kp N4    &kp N7       &kp N8     &kp N9      &kp N0
			&trans      &trans      &trans       &trans
			>;
		};	
    #else
		num_layer {
			label = "Num";
			bindings = <
			&kp F2      &kp F3      &kp F4        &kp F5     	&kp F8    &kp F9     &kp F10    &kp F11
			&kp EXCL    &kp AT   	&kp POUND     &kp DOLLAR    &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR
			&kp N1      &kp N2      &kp N3        &kp N4    	&kp N7    &kp N8     &kp N9     &kp N0
			&trans      &trans      &trans        &trans
			>;
		};
    #endif
		
		kp_layer {
			label = "Kp";
			bindings = <
			&bootloader		&bt BT_CLR		&out OUT_BLE	&out OUT_USB    &kp KP_N7 	&kp KP_N8 	&kp KP_N9 	&bootloader
			&bt BT_SEL 0  	&bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &kp KP_N4  	&kp KP_N5 	&kp KP_N6 	&kp KP_MINUS
			&trans		 	&trans     		&kp KP_MULTIPLY &kp KP_DIVIDE   &kp KP_N1  	&kp KP_N2	&kp KP_N3 	&kp KP_PLUS
			&trans         	&trans 			&kp KP_N0       &kp KP_DOT
			>;
		};
	};
};
