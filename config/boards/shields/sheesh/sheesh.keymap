/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "taps.dtsi"

#define NAV 1
#define NUM 2
#define KP 3

/ {
	combos {
		compatible = "zmk,combos";
		combo_num_l {
			timeout-ms = <50>;
			key-positions = <24 25>;
			layers = <0>;
			bindings = <&mo NUM>;
		};
		combo_num_r {
			timeout-ms = <50>;
			key-positions = <26 27>;
			layers = <0>;
			bindings = <&mo NUM>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <0 8>;
			layers = <0>;
			bindings = <&kp ESC>;
		};
		combo_caps_word {
			timeout-ms = <50>;
			key-positions = <8 16>;
			layers = <0>;
			bindings = <&caps_word>;
		};
		
		combo_z {
			timeout-ms = <50>;
			key-positions = <6 7>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp Z>;
		};
		combo_q {
			timeout-ms = <50>;
			key-positions = <22 23>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp Q>;
		};
		combo_minus {
			timeout-ms = <50>;
			key-positions = <8 9>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp MINUS>;
		};
		combo_comma {
			timeout-ms = <50>;
			key-positions = <9 10>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp COMMA>;
		};
		combo_sqt {
			timeout-ms = <50>;
			key-positions = <10 11>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SQT>;
		};
		combo_semi {
			timeout-ms = <50>;
			key-positions = <12 13>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SEMI>;
		};
		combo_dot {
			timeout-ms = <50>;
			key-positions = <13 14>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp DOT>;
		};
		combo_slash {
			timeout-ms = <50>;
			key-positions = <14 15>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SLASH>;
		};
		combo_grave {
			timeout-ms = <50>;
			key-positions = <0 1>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp GRAVE>;
		};
	};
	
	
	keymap {
		compatible = "zmk,keymap";
		engrammer_layer {
			bindings = <
			&kp B    	&kp Y    	&kp O     	&kp U       	&kp L      		&kp D    	&kp W    	&kp V
			&hl LCTRL C &hl LALT I 	&hl LGUI E  &hls LSHFT A    &hrs RSHFT H  	&hr RGUI T 	&hr RALT S 	&hr RCTRL N
			&kp G    	&kp X    	&kp J     	&kp K      		&kp R      		&kp M    	&kp F    	&kp P
			&mqt KP TAB &mqt NAV BSPC &mqt NAV SPACE &mqt KP RETURN
			>;
		};
		
		nav_layer {
			bindings = <
			&kp EXCL   		&kp AT     		&kp LBKT    	&kp RBKT      	&kp  HOME       &kp PG_DN      	&kp PG_UP   	&kp END
			&hl LCTRL LPAR 	&hl LALT RPAR 	&hl LGUI LBRC 	&hls LSHFT RBRC &hrs RSHFT LARW	&hr RGUI DARW 	&hr RALT UARW 	&hr RCTRL RARW
			&kp LT     		&kp SLASH     	&kp EQUAL      	&kp GT          &kp LG(Z)      	&kp LG(X)   	&kp LG(C)  		&kp LG(V)
			&kp AMPS      	&kp BSLH      	&kp HASH      	&kp DOLLAR 
			>;
		};
		
		num_layer {
			bindings = <
			&kp F12    &kp F7   &kp F8    &kp F9    	   		&kp N7    	  &kp N8       &kp N9       &kp EQUAL
			&hl LCTRL F11 &hl LALT F4 &hl LGUI F5 &hls LSHFT F6 &hrs RSHFT N4 &hr RGUI  N5 &hr RALT  N6 &hr RCTRL  MINUS
			&kp F10    &kp F1   &kp F2    &kp F3           		&kp N1        &kp N2       &kp N3       &trans
			&trans     &trans      		   			   	   		&kp N0        &kp DOT
			>;
		};
		
		kp_layer {
			bindings = <
			&bt BT_CLR		&trans			&out OUT_BLE	&out OUT_USB     &kp KP_N7 		&kp KP_N8 	&kp KP_N9 	&kp KP_PLUS
			&bt BT_SEL 0  	&bt BT_SEL 1    &bt BT_SEL 2    &kp KP_DIVIDE    &kp KP_N4  	&kp KP_N5 	&kp KP_N6 	&kp KP_MINUS
			&trans		 	&trans     		&trans			&kp KP_MULTIPLY  &kp KP_N1  	&kp KP_N2	&kp KP_N3 	&kp KP_ENTER
			&trans         	&trans 			&kp KP_N0       &kp KP_DOT
			>;
		};
	};
};
